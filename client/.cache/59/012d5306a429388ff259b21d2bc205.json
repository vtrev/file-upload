{"id":"../node_modules/react-image-file/dist/load.js","dependencies":[{"name":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/load.js.map","includedInParent":true,"mtime":1559053938287},{"name":"/home/vusi/projects/vusi-app/node_modules/react-image-file/src/load.ts","includedInParent":true,"mtime":1559053938567},{"name":"/home/vusi/projects/vusi-app/package.json","includedInParent":true,"mtime":1559053939559},{"name":"/home/vusi/projects/vusi-app/node_modules/react-image-file/package.json","includedInParent":true,"mtime":1559053938931},{"name":"./isString","loc":{"line":3,"column":25},"parent":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/load.js","resolved":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/isString.js"},{"name":"./isBlob","loc":{"line":4,"column":23},"parent":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/load.js","resolved":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/isBlob.js"},{"name":"./isFile","loc":{"line":5,"column":23},"parent":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/load.js","resolved":"/home/vusi/projects/vusi-app/node_modules/react-image-file/dist/isFile.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isString_1 = require(\"./isString\");\nvar isBlob_1 = require(\"./isBlob\");\nvar isFile_1 = require(\"./isFile\");\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\nexports.loadString = function (src, cb) {\n    return (src\n        ? cb(null, { src: src })\n        : cb(new Error(\"src is empty\")));\n};\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\nexports.loadFile = function (file, cb) {\n    var reader = new FileReader();\n    reader.onload = function (evt) {\n        cb(null, { src: reader.result,\n            alt: file.name\n        });\n    };\n    reader.onerror = function (evt) { return cb(reader.error); };\n    reader.readAsDataURL(file);\n};\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexports.loadBlob = function (blob, cb) {\n    try {\n        var src_1 = URL.createObjectURL(blob);\n        var done = function () { return URL.revokeObjectURL(src_1); };\n        cb(null, { src: src_1 }, done);\n    }\n    catch (err) {\n        return cb(err);\n    }\n};\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n *\n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexports.loadAnything = function (prop, cb) {\n    return (isString_1.isString(prop)\n        ? exports.loadString(prop, cb)\n        : (isBlob_1.isBlob(prop)\n            ? exports.loadBlob(prop, cb)\n            : (isFile_1.isFile(prop)\n                ? exports.loadFile(prop, cb)\n                : cb(new Error(\"prop `\" + prop + \"` is not a valid loadable object\")))));\n};\nexports.default = exports.loadAnything;\n"},"sourceMaps":{"js":{"version":3,"file":"load.js","sourceRoot":"","sources":["../src/load.ts"],"names":[],"mappings":";;AAAA,uCAAqC;AACrC,mCAAiC;AACjC,mCAAiC;AAyBjC;;;;;;;;GAQG;AACU,QAAA,UAAU,GACrB,UAAC,GAAU,EAAC,EAAe;IAC3B,OAAA,CAAE,GAAG;QACL,CAAC,CAAC,EAAE,CAAC,IAAI,EAAC,EAAC,GAAG,KAAA,EAA2B,CAAC;QAC1C,CAAC,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAC9B;AAHD,CAGC,CAAA;AAEH;;;;;;GAMG;AACU,QAAA,QAAQ,GACnB,UAAC,IAAS,EAAC,EAAe;IACxB,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAChC;IAAC,MAAM,CAAC,MAAM,GAAG,UAAC,GAAiB;QAChC,EAAE,CAAE,IAAI,EACR,EAAE,GAAG,EAAC,MAAM,CAAC,MAAM;YACjB,GAAG,EAAC,IAAI,CAAC,IAAI;SACU,CAAC,CAAA;IAC5B,CAAC,CACF;IAAC,MAAM,CAAC,OAAO,GAAG,UAAC,GAAc,IAAK,OAAA,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAhB,CAAgB,CACtD;IAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC,CAAA;AAEH;;;;;;;;GAQG;AACU,QAAA,QAAQ,GACnB,UAAE,IAAU,EAAE,EAAgB;IAC5B,IACA,CAAC;QAAC,IAAM,KAAG,GAAG,GAAG,CAAC,eAAe,CAAE,IAAI,CAAE,CACxC;QAAC,IAAM,IAAI,GAAG,cAAM,OAAA,GAAG,CAAC,eAAe,CAAE,KAAG,CAAE,EAA1B,CAA0B,CAC9C;QAAC,EAAE,CAAE,IAAI,EAAE,EAAE,GAAG,OAAA,EAA0B,EAAE,IAAI,CAAE,CAAC;IACpD,CAAC;IACD,KAAK,CAAA,CAAE,GAAI,CAAC,CACZ,CAAC;QAAC,MAAM,CAAC,EAAE,CAAE,GAAG,CAAE,CAAA;IAClB,CAAC;AACH,CAAC,CAAA;AAEH;;;;;;;;;GASG;AACU,QAAA,YAAY,GAAG,UAAE,IAA0B,EAAE,EAAgB;IACxE,OAAA,CAAE,mBAAQ,CAAE,IAAI,CAAE;QAClB,CAAC,CAAC,kBAAU,CAAE,IAAI,EAAE,EAAE,CAAE;QACxB,CAAC,CAAC,CAAE,eAAM,CAAE,IAAI,CAAE;YAChB,CAAC,CAAC,gBAAQ,CAAE,IAAI,EAAE,EAAE,CAAE;YACtB,CAAC,CAAC,CAAE,eAAM,CAAE,IAAI,CAAE;gBAChB,CAAC,CAAC,gBAAQ,CAAE,IAAI,EAAE,EAAE,CAAE;gBACtB,CAAC,CAAC,EAAE,CAAE,IAAI,KAAK,CAAE,WAAU,IAAI,qCAAmC,CAAE,CAAE,CACrE,CACF,CACF;AATD,CASC,CAAA;AAEH,kBAAe,oBAAY,CAAA","sourcesContent":["import { isString } from './isString'\nimport { isBlob } from './isBlob'\nimport { isFile } from './isFile'\n\nexport interface ImageContentFromString{\n  src:string\n}\n\nexport interface ImageContentFromFile{\n  src:string\n  alt:string\n}\n\nexport interface ImageContentFromBlob{\n  src:string\n}\n\nexport type ImageContent = ImageContentFromBlob | ImageContentFromFile | ImageContentFromString\n\nexport interface LoadCallback{\n  (err:null,res:ImageContentFromString):void\n  (err:null,res:ImageContentFromFile):void\n  (err:null,res:ImageContentFromBlob,done:()=>void):void\n  (err:null,res:ImageContent,done?:()=>void):void\n  (err:Error|DOMError):void\n}\n\n/**\n * This is a dumb function that essentially takes a string and assigns it to an object\n * of shape `{src:string}`. It exists only so the `loadAnything` function, which accepts\n * blobs, files, or strings, works with whatever it is given\n * @param src a string\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if `src` is empty, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n */\nexport const loadString = \n  (src:string,cb:LoadCallback) =>\n  ( src\n  ? cb(null,{src} as ImageContentFromString)\n  : cb(new Error(`src is empty`))\n  )\n\n/**\n * Creates a suitable data string to use from a dom File object\n * @param file a dom File object\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and an `alt` property containing the file name\n */\nexport const loadFile = \n  (file:File,cb:LoadCallback) => \n  { const reader = new FileReader()\n  ; reader.onload = (evt:ProgressEvent) =>\n    { cb( null,\n      { src:reader.result\n      , alt:file.name\n      } as ImageContentFromFile)\n    }\n  ; reader.onerror = (evt:ErrorEvent) => cb(reader.error)\n  ; reader.readAsDataURL(file);\n  }\n\n/**\n * Creates a data string from a blob, that you can use in an image.\n * Don't forget to call `done` once you've used it to free the memory\n * @param blob the blob\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexport const loadBlob = \n  ( blob: Blob, cb: LoadCallback ) =>\n  { try\n    { const src = URL.createObjectURL( blob )\n    ; const done = () => URL.revokeObjectURL( src )\n    ; cb( null, { src } as ImageContentFromBlob, done );\n    }\n    catch( err )\n    { return cb( err )\n    }\n  }\n\n/**\n * Loads a Blob, or a File in a way that makes it suitable to be used in a node image\n * Does nothing to strings, but accepts them in order to make it easy to use this function everywhere\n * \n * @param prop the src to load\n * @param cb   A callback to use when done. The Callback receives three arguments\n *  - err: An error object if there was an error, `null` otherwise\n *  - res: the resource object. It will have a `src` property, and possibly an `alt` property\n *  - done: an optional function used to free the resource; you need to call that after assigning the resource to an image\n */\nexport const loadAnything = ( prop: File | Blob | string, cb: LoadCallback ) =>\n  ( isString( prop )\n  ? loadString( prop, cb )\n  : ( isBlob( prop )\n    ? loadBlob( prop, cb )\n    : ( isFile( prop )\n      ? loadFile( prop, cb )\n      : cb( new Error( `prop \\`${prop}\\` is not a valid loadable object` ) )\n      )\n    )\n  )\n\nexport default loadAnything"]}},"error":null,"hash":"b90ca3032efa375679a0889e3d3253af","cacheData":{"env":{}}}